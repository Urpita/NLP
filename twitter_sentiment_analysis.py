# -*- coding: utf-8 -*-
"""Twitter_sentiment_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DWg688yz2MEzUoht3F-1eE4b1IvI55JQ
"""

# utilities
import re
import numpy as np
import pandas as pd
# plotting
import seaborn as sns
from wordcloud import WordCloud
import matplotlib.pyplot as plt
# nltk
from nltk.stem import WordNetLemmatizer
# sklearn
from sklearn.svm import LinearSVC
from sklearn.naive_bayes import BernoulliNB
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import confusion_matrix, classification_report

# Importing the necessary libraries
import pandas as pd

# Define constants
DATASET_COLUMNS = ['target','ids','date','flag','user','text']
DATASET_ENCODING = "ISO-8859-1"

# Load the dataset
df = pd.read_csv('/content/project.csv', encoding=DATASET_ENCODING, names=DATASET_COLUMNS)

# Display a sample of the data
df.sample(5)

df.head()

df.columns

print('length of data is', len(df))

df.shape

df.info()

df.dtypes

np.sum(df.isnull().any(axis=1))

cat=df.select_dtypes(include=['object']).columns
num=df.select_dtypes(include=['number']).columns

cat,num

np.sum(df[cat].isnull().any(axis=1))

np.sum(df[num].isnull().any(axis=1))

for i in cat:
  mode=df[i].mode()
  df[i].fillna(mode[0],inplace=True)

np.sum(df[cat].isnull().any(axis=1))

np.sum(df.isnull().any(axis=1))

print('Count of columns in the data is:  ', len(df.columns))
print('Count of rows in the data is:  ', len(df))

df['target'].unique()

df['target'].nunique()

# Plotting the distribution for dataset.
ax = df.groupby('target').count().plot(kind='bar', title='Distribution of data',legend=False)
# ax.set_xticklabels(['Negative','Positive'], rotation=0)
# Storing data in lists.
text, sentiment = list(df['text']), list(df['target'])

import seaborn as sns
sns.countplot(x='target', data=df)



"""Data Preprocessing

"""

data=df[['text','target']]

data['target'] = data['target'].replace(4,1)

data['target'].unique()

data_pos = data[data['target'] == 1]
data_neg = data[data['target'] == 0]

data_pos = data_pos.iloc[:int(20000)]
data_neg = data_neg.iloc[:int(20000)]

dataset = pd.concat([data_pos, data_neg])

dataset['text']=dataset['text'].str.lower()
dataset['text'].tail()

stopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',
             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',
             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',
             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from',
             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',
             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',
             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',
             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',
             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're','s', 'same', 'she', "shes", 'should', "shouldve",'so', 'some', 'such',
             't', 'than', 'that', "thatll", 'the', 'their', 'theirs', 'them',
             'themselves', 'then', 'there', 'these', 'they', 'this', 'those',
             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',
             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',
             'why', 'will', 'with', 'won', 'y', 'you', "youd","youll", "youre",
             "youve", 'your', 'yours', 'yourself', 'yourselves']

STOPWORDS = set(stopwordlist)
def cleaning_stopwords(text):
    return " ".join([word for word in str(text).split() if word not in STOPWORDS])
dataset['text'] = dataset['text'].apply(lambda text: cleaning_stopwords(text))
dataset['text'].head()

import string
english_punctuations = string.punctuation
punctuations_list = english_punctuations
def cleaning_punctuations(text):
    translator = str.maketrans('', '', punctuations_list)
    return text.translate(translator)
dataset['text']= dataset['text'].apply(lambda x: cleaning_punctuations(x))
dataset['text'].tail()

def cleaning_repeating_char(text):
    return re.sub(r'(.)1+', r'1', text)
dataset['text'] = dataset['text'].apply(lambda x: cleaning_repeating_char(x))
dataset['text'].tail()

def cleaning_URLs(data):
    return re.sub('((www.[^s]+)|(https?://[^s]+))',' ',data)
dataset['text'] = dataset['text'].apply(lambda x: cleaning_URLs(x))
dataset['text'].tail()

def cleaning_numbers(data):
    return re.sub('[0-9]+', '', data)
dataset['text'] = dataset['text'].apply(lambda x: cleaning_numbers(x))
dataset['text'].tail()

from nltk.tokenize import RegexpTokenizer
tokenizer = RegexpTokenizer(r'w+')
dataset['text'] = dataset['text'].apply(tokenizer.tokenize)
dataset['text'].head()

import nltk
st = nltk.PorterStemmer()
def stemming_on_text(data):
    text = [st.stem(word) for word in data]
    return data
dataset['text']= dataset['text'].apply(lambda x: stemming_on_text(x))
dataset['text'].head()

import nltk
nltk.download('wordnet')
nltk.download('punkt')
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer

# Initialize the lemmatizer
lm = WordNetLemmatizer()

# Function to lemmatize the text
def lemmatizer_on_text(data):
    if isinstance(data, str):  # Ensure that the data is a string
        # Tokenize the text (split into words)
        words = word_tokenize(data)

        # Lemmatize each word and return the lemmatized text
        lemmatized_text = [lm.lemmatize(word) for word in words]
        return ' '.join(lemmatized_text)  # Join the words back into a string
    else:
        return data  # Return the original data if it's not a string

# Apply lemmatizer function to the 'text' column
dataset['text'] = dataset['text'].apply(lambda x: lemmatizer_on_text(x))

# Display the first 5 rows of the lemmatized text
dataset['text'].head()

X=data.text
y=data.target

import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Take the first 800,000 rows of the text
data_neg = data['text'][:800000]

# Convert all values to strings, ensuring no NaN or other non-string types cause issues
data_neg = data_neg.fillna('').astype(str)

# Generate the word cloud
plt.figure(figsize = (10,10))
wc = WordCloud(max_words = 1000, width = 1600, height = 800,
               collocations=False).generate(" ".join(data_neg))

# Display the word cloud
plt.imshow(wc, interpolation='bilinear')
plt.axis('off')  # Hide axis
plt.show()

import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Take the second part of the text data
data_pos = data['text'][800000:]

# Check if there is any valid text in data_pos
if data_pos.isna().sum() > 0 or data_pos.empty:
    print("The data is empty or contains no valid text.")
else:
    # Convert all values to strings, ensuring no NaN or other non-string types cause issues
    data_pos = data_pos.fillna('').astype(str)

    # Generate the word cloud
    wc = WordCloud(max_words=1000, width=1600, height=800,
                   collocations=False).generate(" ".join(data_pos))

    # Display the word cloud
    plt.figure(figsize=(20, 20))
    plt.imshow(wc, interpolation='bilinear')
    plt.axis('off')  # Hide axis
    plt.show()

# Separating the 95% data for training data and 5% for testing data
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.05, random_state =26105111)

from sklearn.feature_extraction.text import TfidfVectorizer

vectoriser = TfidfVectorizer()  # Initialize
X_train = vectoriser.fit_transform(X_train)  # Fit and transform on training data
X_test = vectoriser.transform(X_test)  # Transform test data

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix

def model_Evaluate(model, X_test, y_test):
    # Make predictions using the model
    y_pred = model.predict(X_test)

    # Print the evaluation metrics for the dataset
    print(classification_report(y_test, y_pred))

    # Compute the confusion matrix
    cf_matrix = confusion_matrix(y_test, y_pred)

    # Define categories for the confusion matrix
    categories = ['Negative', 'Positive']
    group_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']
    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() / np.sum(cf_matrix)]

    # Create labels for the confusion matrix with percentages
    labels = [f'{v1}\n{v2}' for v1, v2 in zip(group_names, group_percentages)]
    labels = np.asarray(labels).reshape(2, 2)

    # Plot the confusion matrix using seaborn heatmap
    plt.figure(figsize=(8, 6))
    sns.heatmap(cf_matrix, annot=labels, cmap='Blues', fmt='', xticklabels=categories, yticklabels=categories)

    # Add labels and title
    plt.xlabel("Predicted values", fontdict={'size': 14}, labelpad=10)
    plt.ylabel("Actual values", fontdict={'size': 14}, labelpad=10)
    plt.title("Confusion Matrix", fontdict={'size': 18}, pad=20)

    # Show the plot
    plt.show()

# Example usage:
# model_Evaluate(trained_model, X_test, y_test)

def model_Evaluate(model):
    # Predict values for Test dataset
    y_pred = model.predict(X_test)
    # Print the evaluation metrics for the dataset.
    print(classification_report(y_test, y_pred))
    # Compute and plot the Confusion matrix
    cf_matrix = confusion_matrix(y_test, y_pred)
    categories = ['Negative','Positive']
    group_names = ['True Neg','False Pos', 'False Neg','True Pos']
    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() / np.sum(cf_matrix)]
    labels = [f'{v1}n{v2}' for v1, v2 in zip(group_names,group_percentages)]
    labels = np.asarray(labels).reshape(2,2)
    sns.heatmap(cf_matrix, annot = labels, cmap = 'Blues',fmt = '',
                xticklabels = categories, yticklabels = categories)
    plt.xlabel("Predicted values", fontdict = {'size':14}, labelpad = 10)
    plt.ylabel("Actual values" , fontdict = {'size':14}, labelpad = 10)
    plt.title ("Confusion Matrix", fontdict = {'size':18}, pad = 20)

BNBmodel = BernoulliNB()
BNBmodel.fit(X_train, y_train)
model_evaluate(BNBmodel, X_test, y_test)  # Use the updated function name
y_pred1 = BNBmodel.predict(X_test)

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import classification_report, confusion_matrix
from sklearn.naive_bayes import BernoulliNB

def model_evaluate(model, X_test, y_test):
    """Evaluates the model using classification report and confusion matrix."""
    # Make predictions
    y_pred = model.predict(X_test)

    # Print classification report
    print(classification_report(y_test, y_pred))

    # Get all possible class labels
    unique_labels = np.unique(np.concatenate((y_test, y_pred)))

    # Ensure at least two classes are considered in the confusion matrix
    if len(unique_labels) == 1:
        print(f"Warning: Only one class ({unique_labels[0]}) found in y_test and y_pred.")
        return

    # Compute confusion matrix with known labels
    cf_matrix = confusion_matrix(y_test, y_pred, labels=[0, 1])

    # Define categories dynamically based on present labels
    categories = [f'Class {label}' for label in [0, 1]]

    # Compute percentages for visualization
    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() / np.sum(cf_matrix)]
    labels = [f'{value}\n({percent})' for value, percent in zip(cf_matrix.flatten(), group_percentages)]
    labels = np.asarray(labels).reshape(2, 2)

    # Plot confusion matrix
    plt.figure(figsize=(8, 6))
    sns.heatmap(cf_matrix, annot=labels, cmap='Blues', fmt='', xticklabels=categories, yticklabels=categories)

    # Labels and title
    plt.xlabel("Predicted Values", fontsize=14, labelpad=10)
    plt.ylabel("Actual Values", fontsize=14, labelpad=10)
    plt.title("Confusion Matrix", fontsize=18, pad=20)

    # Show plot
    plt.show()

# Train and evaluate the Bernoulli Naive Bayes model
BNB_model = BernoulliNB()
BNB_model.fit(X_train, y_train)

# Evaluate the model
model_evaluate(BNB_model, X_test, y_test)

# Make predictions
y_pred = BNB_model.predict(X_test)

from sklearn.metrics import roc_curve, auc
fpr, tpr, thresholds = roc_curve(y_test, y_pred1)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC CURVE')
plt.legend(loc="lower right")
plt.show()

SVCmodel = LinearSVC(max_iter=5000)
SVCmodel.fit(X_train, y_train)
model_Evaluate(SVCmodel)
y_pred2 = SVCmodel.predict(X_test)

from sklearn.metrics import roc_curve, auc
fpr, tpr, thresholds = roc_curve(y_test, y_pred2)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC CURVE')
plt.legend(loc="lower right")
plt.show()

LRmodel = LogisticRegression(C = 2, max_iter = 1000, n_jobs=-1)
LRmodel.fit(X_train, y_train)
model_Evaluate(LRmodel)
y_pred3 = LRmodel.predict(X_test)

from sklearn.metrics import roc_curve, auc
fpr, tpr, thresholds = roc_curve(y_test, y_pred3)
roc_auc = auc(fpr, tpr)
plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=1, label='ROC curve (area = %0.2f)' % roc_auc)
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC CURVE')
plt.legend(loc="lower right")
plt.show()

